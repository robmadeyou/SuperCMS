<?php

namespace SuperCMS\Models\Product;

use Rhubarb\Stem\Models\Model;
use Rhubarb\Stem\Repositories\MySql\Schema\Columns\MySqlMediumTextColumn;
use Rhubarb\Stem\Repositories\MySql\Schema\MySqlModelSchema;
use Rhubarb\Stem\Schema\Columns\AutoIncrementColumn;
use Rhubarb\Stem\Schema\Columns\ForeignKeyColumn;
use Rhubarb\Stem\Schema\Columns\IntegerColumn;
use Rhubarb\Stem\Schema\Columns\JsonColumn;
use Rhubarb\Stem\Schema\Columns\MoneyColumn;
use Rhubarb\Stem\Schema\Columns\StringColumn;


/**
 *
 *
 * @property int $ProductVariationID Repository field
 * @property string $Name Repository field
 * @property int $ProductID Repository field
 * @property int $AmountAvailable Repository field
 * @property string $Description Repository field
 * @property \stdClass $Properties Repository field
 * @property float $Price Repository field
 * @property-read Product $Product Relationship
 * @property-read ProductImage[]|\Rhubarb\Stem\Collections\RepositoryCollection $Images Relationship
 * @property int $Quantity Repository field
 */
class ProductVariation extends Model
{
    protected function createSchema()
    {
        $model = new MySqlModelSchema('tblProductVariation');

        $model->addColumn(
            new AutoIncrementColumn('ProductVariationID'),
            new StringColumn('Name', 50),
            new ForeignKeyColumn('ProductID'),
            new IntegerColumn('AmountAvailable'),
            new IntegerColumn('Quantity'),
            new MySqlMediumTextColumn('Description'),
            new JsonColumn('Properties'),
            new MoneyColumn('Price'),
            new IntegerColumn('Quantity')
        );

        return $model;
    }

    public function setName($name)
    {
        $this->modelData['Name'] = $name;

        $clean_name = strtr($name, [
            'Å ' => 'S',
            'Å½' => 'Z',
            'Å¡' => 's',
            'Å¾' => 'z',
            'Å¸' => 'Y',
            'Ã€' => 'A',
            'Ã?' => 'A',
            'Ã‚' => 'A',
            'Ãƒ' => 'A',
            'Ã„' => 'A',
            'Ã…' => 'A',
            'Ã‡' => 'C',
            'Ãˆ' => 'E',
            'Ã‰' => 'E',
            'ÃŠ' => 'E',
            'Ã‹' => 'E',
            'ÃŒ' => 'I',
            'Ã?' => 'I',
            'ÃŽ' => 'I',
            'Ã?' => 'I',
            'Ã‘' => 'N',
            'Ã’' => 'O',
            'Ã“' => 'O',
            'Ã”' => 'O',
            'Ã•' => 'O',
            'Ã–' => 'O',
            'Ã˜' => 'O',
            'Ã™' => 'U',
            'Ãš' => 'U',
            'Ã›' => 'U',
            'Ãœ' => 'U',
            'Ã?' => 'Y',
            'Ã ' => 'a',
            'Ã¡' => 'a',
            'Ã¢' => 'a',
            'Ã£' => 'a',
            'Ã¤' => 'a',
            'Ã¥' => 'a',
            'Ã§' => 'c',
            'Ã¨' => 'e',
            'Ã©' => 'e',
            'Ãª' => 'e',
            'Ã«' => 'e',
            'Ã¬' => 'i',
            'Ã­' => 'i',
            'Ã®' => 'i',
            'Ã¯' => 'i',
            'Ã±' => 'n',
            'Ã²' => 'o',
            'Ã³' => 'o',
            'Ã´' => 'o',
            'Ãµ' => 'o',
            'Ã¶' => 'o',
            'Ã¸' => 'o',
            'Ã¹' => 'u',
            'Ãº' => 'u',
            'Ã»' => 'u',
            'Ã¼' => 'u',
            'Ã½' => 'y',
            'Ã¿' => 'y'
        ]);
        $clean_name = strtr($clean_name, ['Ãž' => 'TH', 'Ã¾' => 'th', 'Ã?' => 'DH', 'Ã°' => 'dh', 'ÃŸ' => 'ss', 'Å’' => 'OE', 'Å“' => 'oe', 'Ã†' => 'AE', 'Ã¦' => 'ae', 'Âµ' => 'u']);
        $clean_name = preg_replace(['/\s/', '/\.[\.]+/', '/[^\w_\.\-]/'], ['-', '-', '-'], $clean_name);
        $clean_name = preg_replace('/\-+/', '-', $clean_name);
        $this->SeoSafeName = $clean_name;
    }
}
